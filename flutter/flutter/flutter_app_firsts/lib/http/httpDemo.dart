import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:convert';
import '../http/Bean.dart';
import 'package:http/http.dart' as http;
import 'package:dio/dio.dart';

class HttpDemo extends StatefulWidget {
  @override
  _HttpDemoState createState() => _HttpDemoState();
}

class _HttpDemoState extends State<HttpDemo> {

  var _result="给你一张过去的cd";
  List<Autogenerated> list=new List();
  Dio dio = new Dio();
  var client = new http.Client();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: new Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: <Widget>[
                Container(
                  child: Column(
                    children: <Widget>[
                      Row(
                        children: <Widget>[
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              children: <Widget>[
                                Center(
                                  child: Padding(
                                    padding: const EdgeInsets.all(8.0),
                                    child: MyBody(),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        appBar: AppBar(
          title: Center(child: Text("网络请求")),
          backgroundColor: Colors.deepPurple,
        ),
      ),
    );
  }

  Widget MyBody() {
    return Column(
      children: <Widget>[
        RaisedButton(
          child: Text("原生请求"),
          onPressed: (){
            _loadData();
            setState(() {
              showList();
            });
          },
        ),
        RaisedButton(
          child: Text("http请求"),
          onPressed: (){
            _loadDataByHttp();
            setState(() {
              showList();
            });
          },
        ),
        RaisedButton(
          child: Text("dio请求"),
          onPressed: (){
            _loadDataByDio();
//            setState(() {

//            });
          },
        ),
        Container(
          width: 200.0,
          height: 200.0,
          child: new SingleChildScrollView(
            child: Text(_result,),
          ),
        ),




      ],
    );
  }

  Widget showList(){
    print("ssssss");
    return new ListView.builder(
//      padding: EdgeInsets.all(10),
      itemExtent: 50,
      itemCount: 2,
      itemBuilder:(BuildContext context,int index){

        list.map((value){
          print("${value.result[index].text}");
          return new Text("text ${value.result[index].text}");
        });

      },
    );




  }


  var httpClient = new HttpClient();
  var url = 'https://api.apiopen.top/getJoke?page=1&count=2&type=video';

  _loadData() async {
    try {
      var request = await httpClient.getUrl(Uri.parse(url));
      var response = await request.close();
      if (response.statusCode == HttpStatus.OK) {
        _result = await response.transform(utf8.decoder).join();
        Map<String, dynamic> json = jsonDecode(_result);

        Autogenerated autogenerated = Autogenerated.fromJson(json);
        list.add(autogenerated);
      } else {
        _result = 'error code : ${response.statusCode}';
      }
      print("解析结果为：");
    } catch (exception) {
      _result = '网络异常';
    }


    if (!mounted) return;

    setState(() {

    });
  }

  _loadDataByDio() async {
    try {
      dio.options.responseType=ResponseType.PLAIN;
      Response response = await dio.get(url);
//      responseType: ResponseType.plain,
      if (response.statusCode == HttpStatus.OK) {
        _result = response.data.toString();

        Map<String, dynamic> json = jsonDecode(_result);

        Autogenerated autogenerated = Autogenerated.fromJson(json);
        list.add(autogenerated);

        print("集合长度为${autogenerated.result.length}");

      } else {
        _result = 'error code : ${response.statusCode}';
      }
    } catch (exception) {
      print('exc:$exception');
      _result = 'error';
    }

    setState(() {
      showList();
    });
  }


  _loadDataByHttp() async {
    try {
      http.Response response = await client.get(url);
      if (response.statusCode == HttpStatus.OK) {
        if (response.statusCode == HttpStatus.OK) {
          _result = response.body.toString();
          Map<String, dynamic> json = jsonDecode(_result);


          Autogenerated autogenerated = Autogenerated.fromJson(json);
          list.add(autogenerated);
          print("集合长度为${autogenerated.result.length}");
        } else {
          _result = 'error code : ${response.statusCode}';
        }
        print("http请求数据"+_result);
      } else {
        _result = 'error code : ${response.statusCode}';
      }
    } catch (exception) {
      _result = '网络异常';
    }

    setState(() {
      showList();
    });
  }
}
